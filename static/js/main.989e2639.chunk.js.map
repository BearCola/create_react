{"version":3,"sources":["logo.svg","Counter.js","MyComponent.js","components/PhoneForm.js","components/PhoneInfo.js","components/PhoneInfoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Component","PhoneForm","state","name","phone","handleChange","e","_this","setState","Object","defineProperty","target","value","handleSubmit","preventDefault","props","onCreate","react_default","a","createElement","onSubmit","this","placeholder","onChange","type","PhoneInfo","editing","handleRemove","_this$props","info","onRemove","id","handleToggleEdit","_this$props2","onUpdate","nextProps","nextState","_this$props$info","console","log","style","border","padding","margin","react","onClick","PhoneInfoList","data","list","map","components_PhoneInfo","key","defaultProps","App","information","keyword","handleCreate","concat","objectSpread","filter","handleUpdate","_this2","components_PhoneForm","components_PhoneInfoList","indexOf","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.989e2639.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nclass Counter extends Component {\n\n    state = {\n        number: 0\n    }\n\n    handleIncrease = () => {\n        this.setState({\n            number: this.state.number + 1\n        })\n    }\n\n    handleDecrease = () => {\n        this.setState({\n            number: this.state.number - 1\n        })\n    }\n\n\n    render() {\n        return (\n            <div>\n                <h1>카운터</h1>\n                <div>값: {this.state.number}</div>\n                <button onClick={this.handleIncrease}>+</button>\n                <button onClick={this.handleDecrease}>-</button>\n            </div>\n        )\n    }\n}\n\nexport default Counter;","import React, { Component } from 'react';\n\nclass MyComponent extends Component {\n    state = {\n        value: 0\n    };\n\n    componentDidCatch(error, info) {\n        this.setState({\n            error: true\n        });\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (prevState.value !== nextProps.value) {\n            return {\n                value: nextProps.value\n            };\n        }\n        return null;\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextProps.value === 10) return false;\n        return true;\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.value !== prevProps.value) {\n            console.log('value 값이 바뀌었다!', this.props.value);\n        }\n    }\n\n    componentWillUnmount() {\n        console.log('Good Bye');\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.missing}\n                <p>props: {this.props.value}</p>\n                <p>state: {this.state.value}</p>\n            </div>\n        )\n    }\n}\n\nexport default MyComponent;","import React, { Component } from 'react';\n\nclass PhoneForm extends Component {\n\n    state = {\n        name: '',\n        phone: ''\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n    \n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.onCreate(this.state)\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <input\n                    name=\"name\"\n                    placeholder=\"이름\"\n                    onChange={this.handleChange}\n                    value={this.state.name} />\n                <input \n                    name=\"phone\"\n                    placeholder=\"전화번호\" \n                    onChange={this.handleChange} \n                    value={this.state.phone} />\n                <button type=\"submit\">등록</button>\n                <div>\n                    {this.state.name} {this.state.phone}\n                </div>\n                \n            </form>\n        );\n    }\n}\n\nexport default PhoneForm;","import React, { Component, Fragment } from 'react';\n\nclass PhoneInfo extends Component {\n\n    state = {\n        editing: false,\n        name: '',\n        phone: ''\n    }\n    \n    shouldComponentUpdate(nextProps, nextState) {\n        if (this.state !== nextState) {\n            return true;\n        }\n        return this.props.info !== nextProps.info;\n    }\n\n    handleRemove = () => {\n        const { info, onRemove } = this.props;\n        onRemove(info.id)\n    }\n\n    handleToggleEdit = () => {\n\n        const { info, onUpdate } = this.props;\n        if (this.state.editing) {\n            onUpdate(info.id, {\n                name: this.state.name, \n                phone: this.state.phone\n            })\n        } else {\n            this.setState({\n                name: info.name, \n                phone: info.phone,\n            })\n        }\n\n        this.setState({\n            editing: !this.state.editing,\n        })\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    render() {\n        const { name, phone } = this.props.info;\n        const { editing } = this.state;\n\n        const style = {\n            border: '1px solid black',\n            padding: '8px',\n            margin: '8px',\n        }\n\n        console.log(name)\n\n        return (\n            <div style={style}>\n                {\n                    editing ? (\n                        <Fragment>\n                            <div>\n                                <input\n                                    name=\"name\"\n                                    onChange={this.handleChange} \n                                    value={this.state.name}\n                                />\n                            </div>\n                            <div>\n                                <input \n                                    name=\"phone\"\n                                    onChange={this.handleChange} \n                                    value={this.state.phone}\n                                />\n                            </div>\n                        </Fragment>\n                    ) : (\n                            <Fragment>\n                                <div><b>{name}</b></div>\n                                <div>{phone}</div>\n                            </Fragment>\n                        )\n                }\n\n                <button onClick={this.handleRemove}>삭제</button>\n                <button onClick={this.handleToggleEdit}>\n                    {editing ? '적용' : '수정'}\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default PhoneInfo;","import React, { Component } from 'react';\nimport PhoneInfo from './PhoneInfo';\n\nclass PhoneInfoList extends Component {\n            \n    static defaultProps = {\n        data: []\n    }\n\n    render() {\n\n        const { data, onRemove, onUpdate } = this.props;\n\n        console.log('rendering list');\n\n        const list = data.map(\n            info => (<PhoneInfo \n                        onRemove={ onRemove } \n                        onUpdate = { onUpdate }\n                        info={info} \n                        key={info.id} \n                    />)\n        );\n\n        return (\n            <div>\n                {list}\n            </div>\n        );\n    }\n}\n\nexport default PhoneInfoList;","import React, { Component, Fragment } from 'react';\nimport Counter from './Counter';\nimport logo from './logo.svg';\nimport './App.css';\nimport MyComponent from './MyComponent';\nimport PhoneForm from './components/PhoneForm';\nimport PhoneInfoList from './components/PhoneInfoList';\n\n\nclass App extends Component {\n\n  id = 3; \n\n  state = {\n    information: [\n      {\n        id: 0, \n        name: '홍길동',\n        phone: '010-0000-0001'\n      },\n      {\n        id: 1, \n        name: '김민준',\n        phone: '010-0000-0002'\n      },\n      {\n        id: 2, \n        name: '김벨로퍼트',\n        phone: '010-0000-0003'\n      },\n    ],\n    keyword: '', \n  }\n\n  handleChange = (e) => {\n    this.setState({\n      keyword: e.target.value\n    })\n\n  }\n\n  handleCreate = (data) => {\n    const { information } = this.state; \n    this.setState({\n      information: information.concat({\n        ...data,\n        id: this.id++\n      })\n    })\n  }\n\n  handleRemove = (id) => {\n    const { information } = this.state;\n    this.setState({\n      information: information.filter(info => info.id !== id)\n    })\n  }\n\n  handleUpdate = (id, data) => {\n    const { information } = this.state;\n    this.setState({\n      information: information.map(\n        info => {\n          if (info.id === id) {\n            return {\n              id, \n              ...data,\n            };\n          }\n          return info;\n        }\n      )\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <PhoneForm onCreate={this.handleCreate}/>\n        <input \n          value={this.state.keyword}\n          onChange={this.handleChange}\n          placeholder=\"검색...\" \n        />\n        <PhoneInfoList \n          data={this.state.information.filter(\n            info => info.name.indexOf(this.state.keyword) > -1\n          )}\n          onRemove={this.handleRemove} \n          onUpdate={this.handleUpdate}  \n        />\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}